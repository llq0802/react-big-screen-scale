{"version":3,"file":"react-big-screen-scale.cjs.production.min.js","sources":["../src/components/BigScreenScale.tsx"],"sourcesContent":["import React, { CSSProperties, FC, useEffect, useRef } from 'react';\r\nimport { BigScreenScaleType } from './interface';\r\n// import './BigScreenScale.less';\r\n\r\ninterface IState {\r\n  originalWidth: string | number;\r\n  originalHeight: string | number;\r\n  width?: string | number;\r\n  height?: string | number;\r\n}\r\n\r\n/**\r\n * 防抖函数\r\n * @param {T} fn\r\n * @param {number} delay\r\n * @returns {() => void}\r\n */\r\nfunction debounce<T = Function>(fn: T, delay: number = 400): () => void {\r\n  let timer: NodeJS.Timeout;\r\n  return function(...args: any[]): void {\r\n    if (timer) clearTimeout(timer);\r\n    timer = setTimeout(\r\n      () => {\r\n        typeof fn === 'function' && fn.apply(null, args);\r\n        clearTimeout(timer);\r\n      },\r\n      delay > 0 ? delay : 100\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * 缩放组件\r\n * @param {*} props\r\n * @return {*}\r\n */\r\nconst BigScreenScale: FC<Partial<BigScreenScaleType>> = props => {\r\n  const {\r\n    width = 1920,\r\n    height = 1080,\r\n    autoScale = true,\r\n    isfullScreen = false,\r\n    containerStyle,\r\n    wrapperStyle,\r\n    children,\r\n  } = props;\r\n\r\n  const screenWrapper = useRef<HTMLDivElement>(null);\r\n  const state = useRef<IState>({\r\n    width: 0,\r\n    height: 0,\r\n    originalWidth: 0,\r\n    originalHeight: 0,\r\n  });\r\n\r\n  const styles: Record<string, CSSProperties> = {\r\n    container: {\r\n      overflow: 'hidden',\r\n      backgroundSize: `100% 100%`,\r\n      width: `100vw`,\r\n      height: `100vh`,\r\n      // background: `#000`,\r\n    },\r\n    wrapper: {\r\n      transitionProperty: `all`,\r\n      transitionTimingFunction: `cubic-bezier(0.4, 0, 0.2, 1)`,\r\n      transitionDuration: `500ms`,\r\n      position: `relative`,\r\n      overflow: `hidden`,\r\n      zIndex: 100,\r\n      transformOrigin: `left top`,\r\n      // transformOrigin: `center center`,\r\n    },\r\n  };\r\n\r\n  const onResize = debounce(() => {\r\n    initSize();\r\n    updateSize();\r\n    updateScale();\r\n  });\r\n\r\n  /**\r\n   * 初始化大屏容器宽高\r\n   */\r\n  const initSize = () => {\r\n    // region 获取大屏真实尺寸\r\n    if (width && height) {\r\n      state.current.width = width;\r\n      state.current.height = height;\r\n    } else {\r\n      state.current.width = screenWrapper.current?.clientWidth;\r\n      state.current.height = screenWrapper.current?.clientHeight;\r\n    }\r\n    // region 获取画布尺寸\r\n    if (!state.current.originalHeight || !state.current.originalWidth) {\r\n      state.current.originalWidth = window.screen.width;\r\n      state.current.originalHeight = window.screen.height;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 更新大屏容器宽高\r\n   */\r\n  const updateSize = () => {\r\n    if (state.current.width && state.current.height) {\r\n      screenWrapper.current!.style.width = `${state.current.width}px`;\r\n      screenWrapper.current!.style.height = `${state.current.height}px`;\r\n    } else {\r\n      screenWrapper.current!.style.width = `${state.current.originalWidth}px`;\r\n      screenWrapper.current!.style.height = `${state.current.originalHeight}px`;\r\n    }\r\n  };\r\n\r\n  const setDomScale = (scale: number) => {\r\n    if (!autoScale) return;\r\n    const domWidth = screenWrapper.current!.clientWidth;\r\n    const domHeight = screenWrapper.current!.clientHeight;\r\n    const bodyWidth = document.body.clientWidth;\r\n    const bodyHeight = document.body.clientHeight;\r\n    screenWrapper.current!.style.transform = `scale(${scale},${scale})`;\r\n    // 计算外边距\r\n    let mx = Math.max((bodyWidth - domWidth * scale) / 2, 0);\r\n    let my = Math.max((bodyHeight - domHeight * scale) / 2, 0);\r\n    // 若手动控制外边距\r\n    if (typeof autoScale === 'object') {\r\n      !((autoScale as unknown) as { x: boolean; y: boolean }).x && (mx = 0);\r\n      !((autoScale as unknown) as { x: boolean; y: boolean }).y && (my = 0);\r\n    }\r\n    screenWrapper.current!.style.margin = `${my}px ${mx}px`;\r\n  };\r\n\r\n  const updateScale = () => {\r\n    // 获取真实视口尺寸\r\n    const bodyWidth = document.body.clientWidth;\r\n    const bodyHeight = document.body.clientHeight;\r\n    // 获取大屏最终的宽高\r\n    const realWidth = state.current.width || state.current.originalWidth;\r\n    const realHeight = state.current.height || state.current.originalHeight;\r\n    // 计算缩放比例\r\n    const widthScale = bodyWidth / +realWidth;\r\n    const heightScale = bodyHeight / +realHeight;\r\n    // 若要铺满全屏，则按照各自比例缩放\r\n    if (isfullScreen) {\r\n      screenWrapper.current!.style.transform = `scale(${widthScale},${heightScale})`;\r\n    } else {\r\n      // 按照宽高最小比例进行缩放\r\n      const scale = Math.min(widthScale, heightScale);\r\n      setDomScale(scale);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    initSize();\r\n    updateSize();\r\n    updateScale();\r\n    window.addEventListener('resize', onResize);\r\n    return () => {\r\n      window.removeEventListener('resize', onResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <section\r\n      className=\"react-big-screen-scale\"\r\n      style={{ ...styles.container, ...containerStyle }}\r\n    >\r\n      <div ref={screenWrapper} style={{ ...styles.wrapper, ...wrapperStyle }}>\r\n        {children ?? '请传入被要包裹的组件'}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default BigScreenScale;\r\n"],"names":["props","fn","delay","timer","width","height","autoScale","isfullScreen","containerStyle","wrapperStyle","children","screenWrapper","useRef","state","originalWidth","originalHeight","onResize","initSize","updateSize","updateScale","args","clearTimeout","setTimeout","apply","current","_screenWrapper$curren","clientWidth","_screenWrapper$curren2","clientHeight","window","screen","style","bodyWidth","document","body","bodyHeight","widthScale","heightScale","transform","scale","domWidth","domHeight","mx","Math","max","my","x","y","margin","setDomScale","min","useEffect","addEventListener","removeEventListener","React","className","overflow","backgroundSize","ref","transitionProperty","transitionTimingFunction","transitionDuration","position","zIndex","transformOrigin"],"mappings":"uYAqCwD,SAAAA,GACtD,IArB8BC,EAAOC,EACjCC,IA4BAH,EAPFI,MAAAA,aAAQ,SAONJ,EANFK,OAAAA,aAAS,SAMPL,EALFM,UAAAA,kBAKEN,EAJFO,aAAAA,gBACAC,EAGER,EAHFQ,eACAC,EAEET,EAFFS,aACAC,EACEV,EADFU,SAGIC,EAAgBC,SAAuB,MACvCC,EAAQD,SAAe,CAC3BR,MAAO,EACPC,OAAQ,EACRS,cAAe,EACfC,eAAgB,IAuBZC,GA3DwBf,EA2DJ,WACxBgB,IACAC,IACAC,cA9DmCjB,IAAAA,EAAgB,KAE9C,sCAAYkB,2BAAAA,kBACbjB,GAAOkB,aAAalB,GACxBA,EAAQmB,YACN,WAC8BrB,EAAGsB,MAAM,KAAMH,GAC3CC,aAAalB,KAEfD,EAAQ,EAAIA,EAAQ,OA2DlBe,EAAW,WAKR,QAHHb,GAASC,GACXQ,EAAMW,QAAQpB,MAAQA,EACtBS,EAAMW,QAAQnB,OAASA,IAEvBQ,EAAMW,QAAQpB,eAAQO,EAAca,gBAAdC,EAAuBC,YAC7Cb,EAAMW,QAAQnB,gBAASM,EAAca,gBAAdG,EAAuBC,cAG3Cf,EAAMW,QAAQT,gBAAmBF,EAAMW,QAAQV,gBAClDD,EAAMW,QAAQV,cAAgBe,OAAOC,OAAO1B,MAC5CS,EAAMW,QAAQT,eAAiBc,OAAOC,OAAOzB,SAO3Ca,EAAa,WACbL,EAAMW,QAAQpB,OAASS,EAAMW,QAAQnB,QACvCM,EAAca,QAASO,MAAM3B,MAAWS,EAAMW,QAAQpB,WACtDO,EAAca,QAASO,MAAM1B,OAAYQ,EAAMW,QAAQnB,cAEvDM,EAAca,QAASO,MAAM3B,MAAWS,EAAMW,QAAQV,mBACtDH,EAAca,QAASO,MAAM1B,OAAYQ,EAAMW,QAAQT,sBAsBrDI,EAAc,WAElB,IAAMa,EAAYC,SAASC,KAAKR,YAC1BS,EAAaF,SAASC,KAAKN,aAK3BQ,EAAaJ,IAHDnB,EAAMW,QAAQpB,OAASS,EAAMW,QAAQV,eAIjDuB,EAAcF,IAHDtB,EAAMW,QAAQnB,QAAUQ,EAAMW,QAAQT,gBAKrDR,EACFI,EAAca,QAASO,MAAMO,mBAAqBF,MAAcC,MA9BhD,SAACE,GACnB,GAAKjC,EAAL,CACA,IAAMkC,EAAW7B,EAAca,QAASE,YAClCe,EAAY9B,EAAca,QAASI,aACnCI,EAAYC,SAASC,KAAKR,YAC1BS,EAAaF,SAASC,KAAKN,aACjCjB,EAAca,QAASO,MAAMO,mBAAqBC,MAASA,MAE3D,IAAIG,EAAKC,KAAKC,KAAKZ,EAAYQ,EAAWD,GAAS,EAAG,GAClDM,EAAKF,KAAKC,KAAKT,EAAaM,EAAYF,GAAS,EAAG,GAE/B,iBAAdjC,KACNA,EAAqDwC,IAAMJ,EAAK,IAChEpC,EAAqDyC,IAAMF,EAAK,IAErElC,EAAca,QAASO,MAAMiB,OAAYH,QAAQH,QAmB/CO,CADcN,KAAKO,IAAId,EAAYC,KAevC,OAVAc,aAAU,WAKR,OAJAlC,IACAC,IACAC,IACAU,OAAOuB,iBAAiB,SAAUpC,GAC3B,WACLa,OAAOwB,oBAAoB,SAAUrC,MAEtC,IAGDsC,2BACEC,UAAU,yBACVxB,WA5GS,CACTyB,SAAU,SACVC,2BACArD,cACAC,gBAwGiCG,IAEjC8C,uBAAKI,IAAK/C,EAAeoB,WAvGlB,CACP4B,yBACAC,wDACAC,2BACAC,oBACAN,kBACAO,OAAQ,IACRC,4BAgGwDvD,UACrDC,EAAAA,EAAY"}